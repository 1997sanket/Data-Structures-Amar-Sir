//  Enter Binary numbers in a Linked List and Print its Decimal value. Eg : enter 1010 and get output as 10

/*

	1. So the idea here is we first enter 1 0 1 0 in the linked list.
	2. Then traverse the linked list and put each element in Stack.
	3. Then we pop each element (as we need last element first for binary to decimal calculation). And calculate.

*/

#include<iostream>

using namespace std;





struct node {
	int e;	//To store data

	struct node* next; // To point to next node
};

class LinkedList {


public:

	struct node* root;
	struct node* end;


	void createList() {

		root = end = NULL;
	}


	void insertLeft(int e) {

		node* n = new node;

		//Setting element of the new node as given by user
		n->e = e;

		//Setting n's pointer to NULL
		n->next = NULL;

		//If root is NULL(no element) then this is our first and last element
		if (root == NULL) {
			root = end = n;
		}

		else {
			//Our element's next will point to the first element
			n->next = root;

			//root will now point to the newest element
			root = n;
		}

	}


	void insertRight(int e) {

		node* n = new node;
		n->e = e;
		n->next = NULL;

		if (root == NULL) {
			root = end = n;
		}

		else {

			cout << "Inserted : " << n->e << endl;

			//Last element's next will point to the new element
			end->next = n;

			//This is our new last element now
			end = n;
		}
	}


	void deleteLeft() {

		if (root == NULL) {
			cout << "No nodes present " << endl;
		}

		else {


			cout << "Deleted : " << root->e;

			struct node* temp = root;

			//Root will now point to next node
			root = root->next;

			delete temp;	//deleting first node

		}
	}



	void deleteRight() {

		if (end == NULL) {
			cout << "No nodes " << endl;
		}

		else {

			struct node* t = root;
			struct node* t2 = NULL;

			while (t != end) {
				t2 = t;

				t = t->next;
			}

			//End will now point to second last node
			end = t2;

			//Last node's next should be NULL
			end->next = NULL;

			cout << "t2 = " << t2->e << endl;

			cout << "Deleted : " << t->e << endl;
			//delete last node
			delete t;
		}
	}



	void deleteElement(int e) {

		struct node* t = root;

		struct node* t2 = NULL;

		while ((t->e != e) && (t != NULL)) {
			t2 = t;

			t = t->next;
		}

		//If its the first element
		if (t == root) {
			cout << "Deleted : " << t->e << endl;

			//root will point to 2nd element
			root = t->next;

			//Delete first element
			delete t;
		}
		//t is on last element's null
		else if (t == NULL) {
			cout << "No element found " << endl;
		}
		else {

			cout << "Deleted : " << t->e << endl;

			t2->next = t->next;

			//In case we found element at the end, then end will point to the second last 
			if (t->next == NULL) {
				end = t2;
			}

			delete t;
		}
	}



	void search(int e) {

		struct node* t = root;

		while (((t->e) != e) && (t != NULL)) {


			t = t->next;
		}

		//t is on last element's null
		if (t == NULL) {
			cout << "No element found " << endl;
		}
		else {
			cout << "Element found " << endl;
		}

	}


	void printList() {


		cout << "Printing" << endl;

		struct node* t = NULL;

		for (t = root; t != NULL; t = t->next) {
			cout << t->e << " ";
		}
	}



};



//Stack
int Stack[50];
int MaxSize = 0;
int tos = -1;


int total = 0;
int raisedTo = 0;

//Push 
void push(int e) {
	tos++;
	Stack[tos] = e;	//For the first element S[0] = 10;


	cout << "Pushed : " << e << endl;
}


//Check whether Stack is empty
int isEmpty() {
	if (tos == -1) return 1;

	else return 0;
}


//Pop
int pop() {

	int temp = Stack[tos];	//First secure the current element
	tos--;	//decrement tos

	cout << "Popped : " << temp << endl;

	return temp;	//return the secured element
}




//Calculates 2 raised to for each 'raisedTo' passed
int func(int raisedTo) {

	int mul = 1;

	if (raisedTo == 0) return 1;

	else {

		for (int i = 1; i <= raisedTo; i++) {

			mul = mul * 2;
		}

		return mul;

	}


}



//Pops each element and sends it for calucation
void show_Decimal() {

	while (isEmpty() == 0) {

		int bit = pop();

		//cout << "Popped : " << bit << endl;

		total = total + bit * func(raisedTo);

		raisedTo++;
	}

	cout << "In Decimal : " << total << endl;
}




//function to traverse linked list and push bits in Stack
void traverse(struct node * root) {

	struct node* t = NULL;

	for (t = root; t != NULL; t = t->next) {

		//Take data
		int bit = t->e;

		//Increase size of Stack
		MaxSize++;

		//push data in stack
		push(bit);


	}

	//Finally calculate and show result
	show_Decimal();
}















int main() {

	int e, choice;

	LinkedList list;

	//Initialise first and last to NULL.
	list.createList();

	cout << "Select " << endl;

	do {


		cout << "1. InsertLeft " << endl;
		cout << "2. InsertRight " << endl;
		cout << "3. DeleteLeft " << endl;
		cout << "4. DeleteRight " << endl;
		cout << "5. DeleteElement " << endl;
		cout << "6. Search " << endl;
		cout << "7. PrintList " << endl;
		cout << "8. Show Decimal " << endl;
		cout << "0. Exit " << endl;

		cin >> choice;

		switch (choice) {
		case 1:

			cout << "Enter element " << endl;
			cin >> e;

			list.insertLeft(e);

			break;



		case 2:

			cout << "Enter element " << endl;
			cin >> e;

			list.insertRight(e);
			break;



		case 3:

			list.deleteLeft();

			break;


		case 4:

			list.deleteRight();

			break;

		case 5:

			cout << "enter element to delete " << endl;
			cin >> e;

			list.deleteElement(e);

			break;


		case 6:

			cout << "enter element to search " << endl;
			cin >> e;

			list.search(e);

			break;

		case 7:

			if (list.root == NULL && list.end == NULL) {
				cout << "List is empty" << endl;
			}

			else {
				list.printList();
				cout << endl;
			}

			break;

		case 8 :
				
			traverse(list.root);
			break;

		case 0:
			exit(1);

		default:

			cout << "Incorrect choice " << endl;
			break;


		}




	} while (choice != 0);


}