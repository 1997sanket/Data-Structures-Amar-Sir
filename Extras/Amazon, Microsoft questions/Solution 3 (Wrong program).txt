//  Singly Linked List

#include<iostream>

using namespace std;

struct node {
	int e;	//To store data

	struct node* next; // To point to next node
};

class LinkedList {


public:

	struct node* root;
	struct node* end;


	void createList() {

		root = end = NULL;
	}


	void insertLeft(int e) {

		node* n = new node;

		//Setting element of the new node as given by user
		n->e = e;

		//Setting n's pointer to NULL
		n->next = NULL;

		//If root is NULL(no element) then this is our first and last element
		if (root == NULL) {
			root = end = n;

			//next is pointing to the same node
			end->next = root;
		}

		else {
			//Our element's next will point to the first element
			n->next = root;

			//root will now point to the newest element
			root = n;

			//Last node's next will point to the first node.
			end->next = root;
		}

	}


	void insertRight(int e) {

		node* n = new node;
		n->e = e;
		n->next = NULL;

		//If first node
		if (root == NULL) {
			root = end = n;

			//next is pointing to the same node
			end->next = root;
		}

		//For consecutive nodes
		else {

			cout << "Inserted : " << n->e << endl;

			//Last element's next will point to the new element
			end->next = n;

			//This is our new last element now
			end = n;

			//Last node's next will point to the first node
			end->next = root;
		}
	}


	void deleteLeft() {

		if (root == NULL) {
			cout << "No nodes present " << endl;
		}

		else {

			struct node* t;

			//Securing 1st node
			t = root;

			//root will point to 2nd node
			root = root->next;

			//End will point to 2nd node
			end->next = root;

			//Shradhanjali
			cout << "Deleted : " << t->e << endl;

			//delete 1st
			delete t;

		}
	}



	void deleteRight() {

		if (root == NULL) {
			cout << "No nodes " << endl;
		}

		else {

			struct node* t = root;

			//To catch second last node
			while (t->next != end) {

				t = t->next;
			}

			struct node* temp = end;

			//End will now point to second last node
			end = t;

			//Last node's next should point to root
			end->next = root;


			cout << "Deleted : " << temp->e << endl;
			//delete last node
			delete temp;
		}
	}



	void deleteElement(int e) {

		struct node* t = root;

		struct node* t2 = NULL;

		//If node to be deleted is the first node
		if (t->e == e) {

			root = t->next;

			end->next = root;

			delete t;
		}

		else {

			do {

				t2 = t;

				t = t->next;


			} while ((t->e != e) && (t != root));


			//If found on last node
			if (t == end) {
				t2->next = t->next;
				end = t2;

				delete t;
			}

			//If found somewhere in middle
			else if (t->e == e) {

				t2->next = t->next;

				delete t;
			}

			//If not found
			else {
				cout << "Element not found " << endl;
			}

		}


	}


	/*
		void search(int e) {

			struct node* t = root;

			while (((t->e) != e) && (t != NULL)) {


				t = t->next;
			}

			//t is on last element's null
			if (t == NULL) {
				cout << "No element found " << endl;
			}
			else {
				cout << "Element found " << endl;
			}

		} */


	void printList() {


		cout << "Printing" << endl;

		struct node* t = root;

		do {
			cout << t->e << " ";

			t = t->next;

		} while (t != root);
	}


	void cycle(int cycle) {

		int n = cycle;

		struct node* t = NULL;
		struct node* t2 = NULL;

		while (n != 0) {

			for (t = root; t != end; t = t->next) {

				t2 = t;

				t = t->next;
			}

			end = t2;
			root = t;

			n--;	//Reducing cycle no
		}

		t2 = NULL;
		t = NULL;

		cout << "New root = " << root->e << endl;
		cout << "New end = " << end->e << endl;
	}


};

int main() {

	int e, choice, cycles;

	LinkedList list;

	//Initialise first and last to NULL.
	list.createList();

	cout << "Select " << endl;

	do {


		cout << "1. InsertLeft " << endl;
		cout << "2. InsertRight " << endl;
		cout << "3. DeleteLeft " << endl;
		cout << "4. DeleteRight " << endl;
		cout << "5. Delete element " << endl;
		cout << "6. PrintList " << endl;
		cout << "7. Cylce the list " << endl;
		cout << "0. Exit " << endl;

		cin >> choice;

		switch (choice) {
		case 1:

			cout << "Enter element " << endl;
			cin >> e;

			list.insertLeft(e);

			break;



		case 2:

			cout << "Enter element " << endl;
			cin >> e;

			list.insertRight(e);
			break;



		case 3:

			list.deleteLeft();

			break;


		case 4:

			list.deleteRight();

			break;


		case 5:

			cout << "ENter element to delete " << endl;
			cin >> e;

			list.deleteElement(e);

			break;

		case 6:

			if (list.root == NULL && list.end == NULL) {
				cout << "List is empty" << endl;
			}

			else {
				list.printList();
				cout << endl;
			}

			break;


		case 7:

			cout << "Enter cycle no " << endl;
			cin >> cycles;

			list.cycle(cycles);

			break;

		case 0:
			exit(1);

		default:

			cout << "Incorrect choice " << endl;
			break;


		}




	} while (choice != 0);


}