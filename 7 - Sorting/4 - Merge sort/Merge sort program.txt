//Merge sort

#include<iostream>

using namespace std;

int arr[5] = { 3, 2, 4, 1, 5 };
int temp[5];


void Merger(int start, int mid, int end) {


	
	int i = start;
	int j = mid + 1;
	int ti = start;

	// 'i' should go from first to mid, 'j' should go from mid+1 to end
	while ( (i <= mid) && (j <= end)) {

		if (arr[i] < arr[j]) {

			//Then put it in a seperate array
			temp[ti++] = arr[i++];
		}

		else {
			temp[ti++] = arr[j++];
		}
	}


	//After while loop ends, it may happen that, either on right or left side, some elements are remaining, so add the remaining elements in temp

	//For left side remaining elements
	while (i <= mid) {
		temp[ti++] = arr[i++];
	}

	//For right side remaining elements
	while (j <= end) {
		temp[ti++] = arr[j++];
	}


}

void  Merge_sort(int start, int end) {

	int mid;

	//Keep dividing only until start is less than end (till we have divided to single elements)
	if (start < end) {

		mid = (start + end) / 2;

		//Again divide Left side 
		Merge_sort(start, mid);

		//Divide right hand side
		Merge_sort(mid + 1, end);

		//Merge 
		Merger(start, mid, end);
	}

}

int main() {

	//Sending start and end
	Merge_sort(0,5);



	//Finally copy all in our original array
	for (int i = 0; i < 5; i++) {
		arr[i] = temp[i];
		cout << arr[i]<< " ";
	}

}