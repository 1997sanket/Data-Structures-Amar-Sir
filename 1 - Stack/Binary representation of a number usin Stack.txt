#include<iostream>

using namespace std;

int S[100];
int tos;
int MaxSize;

//Initialize Stack size
void initSize(int size) {

	MaxSize = size;
	tos = -1;	//tos starts from -1
}

//Whether Stack is full or not
char isFull() {
	if (tos == MaxSize - 1)
		return 1;
	else
		return 0;
}


//Push 
void push(char e) {
	tos++;
	S[tos] = e;	//For the first element S[0] = 10;
}


//Check whether Stack is empty
char isEmpty() {
	if (tos == -1) return 1;

	else return 0;
}


//Pop
int pop() {

	char temp = S[tos];	//First secure the current element
	tos--;	//decrement tos

	return temp;	//return the secured element
}


//Top most element
char atTop() {
	return S[tos];
}


//Printing Stack(LIFO print)
void printStack() {
	int i;

	for (i = tos; i >= 0; i--) {
		cout << S[i] << " ";
	}

	cout << endl;
}

int main() {

	int no, n, remainder;

	char arr[100], i = 0;

	cout << "Enter a decimal number " << endl;
	cin >> no;	//12

	initSize(100);

	n = no;

	while (n != 0) {
		remainder = n % 2;


		//arr[i] = (char)(remainder + 48);	//0, 0, 1, 1
		//i++;

		push(remainder);

		n = n / 2;	//6, 3, 1, 0


	}


	//After while loop ends, length of arr is same as 'i'
	//int length = i;

	//cout << "Length : " << length << endl;

	//Initializing Stack with the length
	//initSize(length);

	//Pushing
	//for (int i = 0; i < length; i++) {
	//	push(arr[i]);
	//}

	cout << "Binary representation is : ";

	//Printing
	printStack();

}